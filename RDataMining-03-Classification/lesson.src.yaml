- Class: meta
  Course: StatMLDM
  Lesson: RDataMining-03-Classification
  Author: Wush Wu
  Type: Standard
  Organization: Taiwan R User Group
  Version: 1.0

- Class: text
  Output: |
    這門課程要介紹R 裡面的kNN演算法。

- Class: text
  Output: |
    為了準備接下來的說明，我們準備了以下的物件。
    X.train是training dataset的covariates, 而y.train則是training
    dataset的label；X.test 是testing dataset的covariates，而y.test
    則是testing dataset的label。

- Class: cmd_question
  Output: |
    請同學輸入：`X.train`看看training dataset的covariates

- Class: text
  Output: |
    接著我們計算X.train與X.test，列與列之間的Euclidean Distance。
    之前的Cluster章節，我們介紹過dist函數可以計算一個矩陣之間，所有
    列與列之間的距離。所以一種做法就是將X.train與X.test合併成一個
    矩陣，然後運用dist做計算。

- Class: cmd_question
  Output: |
    請問同學，X.train有多少列？
  CorrectAnswer: nrow(X.train)
  AnswerTests: |
    test_all(omnitest(correctVal =nrow(X.train)),
      val_has_length(1), stop_if_not(is.numeric))

- Class: cmd_question
  Output: |
    請問同學，X.test有多少列？
  CorrectAnswer: nrow(X.test)
  AnswerTests: |
    test_all(val_has_length(1), omnitest(correctVal =nrow(X.test)), 
      stop_if_not(is.numeric))

- Class: cmd_question
  Output: |
    請輸入`X <- rbind(X.train, X.test)`將X 合併

- Class: cmd_question
  Output: |
    請輸入`d <- dist(X)`計算出X列與列之間的距離

- Class: cmd_question
  Output: |
    由於我們需要從距離矩陣之中，抽出需要的部分（X.train與X.test的
    列與列之間的距離），所以需要先把距離物件轉換為矩陣。
    請同學輸入：`m <- as.matrix(d)`

- Class: cmd_question
  Output: |
    接著，我們抽出X.train與X.test的距離的部分。請同學輸入：
    `m2 <- m[1:75,76:150]`。這裡是選出X的前75列，也就是X.train與
    其他資料的距離；以及X的後75欄，代表X.test與其他資料的距離。

- Class: cmd_question
  Output: |
    R 的which.min可以找出一個向量中，數值最小的位置。
    apply則可以對一個矩陣的每一列或每一欄做相同的動作。
    apply的第二個參數如果是1，代表是對每一列做；如果是2
    代表對每一欄做相同的動作。動作則是定義在第三個參數。
    所以輸入：`i.1nn <- apply(m2, 2, which.min)`就可以取得
    每個欄位中，數字最小的列的位置。

- Class: cmd_question
  Output: |
    接著，利用y.train[i.1nn]，我們就可以取得對應的training data
    point的類別。也就是說，y.train[i.1nn]就是1NN的分類結果。
    請同學輸入：`mean(y.train[i.1nn] == y.test)`來看看1NN的分類結果與
    實際答案相比，正確的機率有多少。

- Class: script
  Output: |
    以上是用R的基礎函數所拼湊出來的計算1NN的方法。我們也可以用同樣
    的脈絡來計算其他資料的1NN分類結果。請同學試試看。
  Script: dm_03_01.R
  AnswerTests: dm_03_01()

- Class: cmd_question
  Output: |
    上述的方法，要計算kNN是比較不方便的。因此，我們使用class
    這個套件來計算kNN的結果。請同學先安裝套件class
  CorrectAnswer: check_then_install("class", "7.3")
  AnswerTests: test_package_version("class", "7.3")

- Class: cmd_question
  Output: |
    接著請同學載入class套件
  CorrectAnswer: library(class)
  AnswerTests: test_search_path("class")

- Class: cmd_question
  Output: |
    我們利用knn函數即可快速計算knn的結果。
    請同學先輸入`?knn`打開說明文件。

- Class: cmd_question
  Output: |
    根據說明文件，我們只要輸入：`knn(X.train, X.test, y.train, k = 1)`
    即可取得1NN的計算結果。請同學試試看。

- Class: text
  Output: |
    以上就是在R 中計算kNN演算法的方式。